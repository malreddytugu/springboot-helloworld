SpringBoot Tutorial for Beginners
----------------------------------
1.How to create SpringBoot Application

Spring and SpringBoot?

Spring Initializr

provide all the basic details artifact id, group id and dependencies
download the zip file of the application and start working.


Maven--Build Tool
JAR : Java Archieve
WAR : Web Archieve
EAR : Enterprise Archieve

Deploy springboot application in tomcat webserver

WebServer			Application Server
tomcat 				weblogic, jboss, websphere

war file            ear file

jar war ear

web container       web and ejb container
supports multithreading  no suppport for multi threading
http/https               http/https/rpc/RMI

inbuilt tomcat---> jar file
tomcat is a web server

https://netbanking.hdfcbank.com/netbanking/
https--secure hypertext transfer protocol
encoding
encryption

abc-->xyz
abc-->h13-->encrption SHA256


ipaddress:port//context/hello

127.0.0.0:8181/hello

80-->http
443-->https

demo.war
demo
	MEATA-INF
	WEB-INF
		classes
			com
				javalearning
					springboot
						helloworld
							controller
								HelloWorldController.java
			application.properties
		lib
		
 

500 -- Internal server error
402--Bad Request
404--Resource not found
how to run a jar file
java -jar jarFile_name.jar

How to do logging in sprinboot

TRACE
DEBUG
INFO
WARN
ERROR

controller
service
Repository

JMS-->RabbiMQ, ActiveMQ, Kafka
Spring Security
MSA

Apache Solr--Search Engine
Apache LicidWorks
Python
Apache AirFlow
Fusion

15 services
kubernetes
docker
jenkins
git hub actions

code walk through--

OrderService---5----10
DeliveryService--5--10
ProductService--5---10

CICD--Jenkins/GHA
scaleup and scaledown

demo.jar-->deployed to some server--->

httP://localhost:8080/demo/hello


windows: cmd--ipconfig-->ipv4 is your local ip addres
API Gateway


Environments
--------------
dev deployemnt   - developers
QA Deployemnet   - qa or testing  -->release version-->sign off 
pre-prod/stage deployment -
prod deployment -

dev-->integration/v1
qa--->release/v1
prod -->master

integration/v1--->task/TFSRPL-1172-AirFlow Service for QA(feature branch) 
PR-->Pull Request
MR-->Merge Request

E?-Release

once you raise the PR to dev branch, people should review the code,
if any suggetions, need to modify and merge the PR.

Jenkins
Docker
Kubernetes
GitHub Actions
--------------




CICD--> Continuos Integration and Continuos deploment
automate the process of building and deployment is called CICD.
integration/v1---> automatically build and deploy to server

asks for permission to merge the code to release branch
it raise PR from integration/v1 ---> release/v1 

release/v1 <---integration/v1, people has to approve
master<---release/v1(RFC-->CHNO1248)
SOP--> Standards of Procedure
Repo: springboot-helloword

Product Owner will an email with Releasenotes
---------------------------------------------
Deployments in kubernetes
--------------------------
blue/green deployment
canary deployment
recreate deploment
rolling deployment

1.How to create a SpringBoot Application
Using Spring Initializr


@SpringBootApplication = @SpringBootConfiguration
						 @EnableAutoConfiguration
						 @ComponentScan
EnableAutoConfiguration: it automatically defines the configurations for the starter dependencies added in pom.xml
eg: spring security, data-jpa etc

ComponentScan: scans the base packages or classes for the beans.
Configuration: java configurations for the beans for ioc to load.

Stereotype annotations used to create a bean and manage its life cycle.

different types stereotype to define the role. 


How to make any Java class as a bean?

@Component
public class ComponentDemo{
	public ComponentDemo() {
		System.out.println("ComponentDemo instantiated");
	}
	
	public String getMessage() {
		return "Hello Message";
	}
}


Now you can autowire the above class.



@RestController
public class HelloworldController {	
	Logger logger = LoggerFactory.getLogger(HelloworldController.class);
	
	@Autowired
	ComponentDemo componentDemo;
}	

POJO or Java Bean
public class Employee{
	private int id;
	private String name;
	
	//getters and setters
}


IOC---Inversion of Control
DI--Dependency Injection


Spring Boot Main annotations
--------------------------------------------------
1. @SpringBootApplication
2. @ComponentScan
3. @EanbleAutoConfiguration
4. @Configuration

Stereotype annotation
----------------------------------------
5.  @Component // to make your java class as a bean.
6.  @Service
7.  @RestController / @Controller, @ResponseBody
8.  @Repository, 

Spring Core related Annotations:
----------------------------------------------------
9.@Configuration // to make java configurations
10.@Bean
11.@Autowired 
12.@Qualifier,@Primary
13.@Lazy 
14.@Value 
15.@PropertySource
16.@ConfigurationProperties 
17.@Profile
18.@Scope

REST API related Annotations:
------------------------------------------------
19.@RestController
20.@RequestMapping
21.@GetMapping
22.@PostMapping
23.@PutMapping
24.@DeleteMapping
25.@RequestBody 
26.@PathVariable
27.@RequestParam
28.@ControllerAdvice & @ExceptionHandler

Spring Data JPA related annotations:
------------------------------------------------------------
29.@Entity
30.@Table
31.@Column
32.@Transactional 
33.Entity class relationships 
34.@OnetoOne 
35.@OnetoMany 
36.@ManytoOne
37.@ManytoMany

Bean:

	java class, and method are there in that java class
AppConfig

	
	@Autowired
	Address addressBean;

RabbitMQ
Kafka
Springboot Annotations
Maven
Profiles
Exception Handling in SpringBoot
Docker
Kubernetes
Spring Security

@Autowired 
	The @Autowired annotation is used to inject the bean automatically.
	The @Autowired annotation is used in Constructor injection, Setter injection, and Field injection.

eg: public interface Momo{
		public String getMomo();
	}
@Component	
public class VegMomo implements Momo{

	@override
	public String getMomo(){
		return "Veg Momo";
	}
}

@Component
public class VegMomo implements Momo{

	@override
	public String getMomo(){
		return "Veg Momo";
	}
}

and in your MomoController, 

	@Autowired
    @Qualifier("vegMomo")
    public void setMomo(Momo momo) {
        this.momo = momo;
    }

//filed injection
@Autowired
@Qualifier("vegPizza")
private Pizza pizza;

@Component is a class-level annotation. During the component scan, Spring Framework automatically detects classes annotated with @Component annotation and creates Spring beans for those classes.

@Configuration
@ComponentScan(basePackages = "com.javalearning.springboot.helloworld")
class UserConfig {}

@Qualifier
	Note that we are using @Qualifier annotation in conjunction with @Autowired to avoid confusion when we have two or more beans configured for the same type.

The @Bean annotation indicates that a method produces a bean to be managed by the Spring container. 

The @Bean annotation is usually declared in the Configuration class to create Spring Bean definitions.


@RestController = @ResponseBody+@Controller
@Controller=@Service=@Repository=@Component

@Service = @Component

Java class-->@Component
         -->@Configuration and the define teh beans.
		 @Bean
		 the method returns the obeject
		 
		 RestTemplate restTemplate; //httpClient;
		 restTemplate.get("http://localhost:8080/hello");
		 
		 
Interface: pure abstract methods

pure abstract method--> with out implenting body

public void show();--> abstract method

public class Employee{

	priavte int id;
	private String name;
	
	public void show(){
		s.o.p("Im Employee")
	}
}

public interface EmpInteface{
		public void show();
}

public class EmpIntefaceImpl implements EmpInteface{
	@Override
	public void show(){
		sop("bla bla");
	}
}

abstraction
abstract class
abstract method
26-08-2024
@Primary:
	We use @Primary annotation to give a higher preference for a bean when there are multiple beans of the same type.

@Lazy
	By deafult spring beans are eagerly loaded.

@SpringBootApplication==@EnableAutoConfiguration,@ComponentScan,@SpringBootConfiguration
@Autowired
@Bean
@Qualifier--->interface-->multiple classes implements interface.
@Component
@Service
@Repository
@Controller
@RestController


@Primary
@Lazy

//Qualifier("ragiPorridge")
@Autowired
private RagiFlour ragiPorridge;

@Component
@Primary
public class RagiPorridge implements RagiFlour{

	public getRagiRecipe(){
		s.o.p("RagiPorridge");
	}
}

@Component
@Lazy
public class Student{
	display(){
		s.o.p("Im a Java Student")
	}
}


@Lazy 
@Value 
@PropertySource

Map-->Interface-->DataStructure


Person==>

name=Malreddy
age=39
mobile=7026376044
email=malreddy.tugu@gmail.com

HashMap<String,String> personMap = new HashMap<String,String>();
personMap.put("name":Malreddy");
personMap.put("mobile":"7026376044");

personMap.get("name");==>Malreddy

27-08-2024
------------------


	@Value("${message}")
	private String message;
	
	@Value("#{${valuesMap}}")
	private Map<String, Integer> valuesMap;
	
	@Value("#{${valuesMap}.key1}")
	private Integer valuesMapKey1;
	
	@Autowired
	private DatasourceProps datasourceProps;
	
	@Autowired
	private DbConfig dbConfig;
	
	@Autowired
	private ProfileController profileController;
	
	@Value("${spring.profiles.active}")
	List<String> activeProfiles;
	
@Value("${emails}")
String[] emails;

emails.length = 3  0,1,2

for(int i=0;i<emails.length;i++){

}

emails[0] = abc@gmail.com
emails[1] = def@gmail.com
emails[2] = ghi@gmail.com

 or
@Value("${emails}")
List<String> emails;

@PropertySource("classpath:custom.properties")
@Value("${message}")

@Value("#{${valuesMap}}")
private Map<String, Integer> valuesMap

and in properties file	
	valuesMap={key1: '1', key2: '2', key3: '3'}

@ConfigurationProperties


Local, Dev, QA,PRE-PROD or Stage, PROD
Profile

db.url=dev db url
db.username=dev db user name
db.password=dev db password

application.properties
eg : application-env.properties

application-dev.properties
application-qa.properties
application-stg.properties
application-prod.properties

java -jar jarfilename.jar
java -jar demo.jar -p=dev

YAML---Yet Another Markup Language

XML, HTML
<persons>
	<person>
		<name>Malreddy</name>
		<age>39</age>
	</person>
	<Person>
		<name>Malreddy</name>
		<age>39</age>
	</person>
</persons>


application.yml

spring.profiles.active=dev
spring.profiles.xyz=abc
	
spring
	profiles
		active:dev
		xyz:abc

Approach#1: By Creating Separate files for each Profile
Let’s create application.yml and three profiles for development, test & production environment respectively.

application.yml

spring:  
  profiles:    
    active: dev
  application:
  name: This is default profile
app: 
  name: This is the Primary Application yml file
application-dev.yml

spring: 
  profiles: dev 
  datasource: 
    username: sa 
    password: sa 
    url: jdbc:h2:mem:db 
    driver-class-name: org.h2.Driver
application-test.yml 

spring: 
  profiles: test 
  datasource: 
    username: root
    password: root123
    url: jdbc:mysql://localhost:3306/myTestDB 
    driver-class-name: com.mysql.cj.jdbc.Driver
application-prod.yml

spring: 
profiles: prod
  datasource: 
    username: username1
    password: password@123
    url: jdbc:oracle:thin:@localhost:1521:xe
    driver-class-name: oracle.jdbc.OracleDriver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.Oracle10gDialect
		
	application.yaml
------------------------	
app.info= This is the multi-document file
spring.config.activate.on-profile=dev
spring.h2.console.enabled=true
spring.h2.console.path=/h2
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.url=jdbc:h2:mem:db
spring.datasource.userName=sa
spring.datasource.password=sa

# ---

spring.config.activate.on-profile=test
spring.datasource.url=jdbc:mysql://localhost:3306/myTestDB
spring.datasource.username=root
spring.datasource.password=root123
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect

# ---

spring.config.activate.on-profile=prod 
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:xe 
spring.datasource.username=username 
spring.datasource.password=password 
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true 
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver 
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.Oracle10gDialect
H

Approach#2: By Creating Single file for all Profiles
Create an application.yml and accommodate all the profiles in it. The first property ‘spring.profiles.active’ represents the active profile. Three hyphens work as a profile separator in this file. Hence, after completion of one profile insert three hyphens as shown below.

spring:
  profiles:
    active: dev
---
spring:
 profiles: dev
 datasource: 
   username: sa
   password: sa
   url: jdbc:h2:mem:db
   driver-class-name: org.h2.Driver
---
spring: 
  profiles: test 
  datasource: 
    username: root
    password: root123
    url: jdbc:mysql://localhost:3306/myTestDB 
    driver-class-name: com.mysql.cj.jdbc.Driver
---
spring: 
  profiles: prod
  datasource: 
    username: username1
    password: password@123
    url: jdbc:oracle:thin:@localhost:1521:xe
    driver-class-name: oracle.jdbc.OracleDriver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.Oracle10gDialect  
---    
As shown in the above example, from the first property, it is clear that ‘dev’ profile is active. Additionally, this single file accommodates all the profiles in it.



1) Activation of a Specific Profile: Apart from property ‘spring.profiles.active‘, a new property ‘spring.config.activate.on-profile’ can be used to set/activate a specific profile. However, we can’t use them together otherwise we may see ConfigDataException.

2) To activate Profiles In Spring Boot programmatically, we can also use the SpringApplication class(main class of the application) as below:

SpringApplication.setAdditionalProfiles("test");


3) In order to activate a profile in Spring Boot using pom.xml, we can specify profile names under ‘spring-boot-maven-plugin’ as below:


<plugins> 
  <plugin>
     <groupId>org.springframework.boot</groupId>
     <artifactId>spring-boot-maven-plugin</artifactId> 
        <configuration> 
           <profiles> 
             <profile>test</profile>
           </profiles>
        </configuration> 
  </plugin> 
  ... 
</plugins>



28-08-2024

dev,qa,stg,prod

@Scope--singleton, prototype, requesst, session
	To test, create a constructor put one sop("Object is created") and observe the output.
@Scope("singleton")
public class HelloWorldController{


	public HelloWorldController(){
		System.out.println("HelloWorldController object created");
	}
......
......
......
}

scopes in spring--- singleton, prototype, request, session

sigleton design pattern
	Design Pattern: solution for commonly occuring problems.
REST API related Annotations:
------------------------------------------------
19.@RestController
20.@RequestMapping
21.@GetMapping
22.@PostMapping
23.@PutMapping
24.@DeleteMapping
25.@RequestBody 
26.@PathVariable
27.@RequestParam
28.@ControllerAdvice & @ExceptionHandler

How can i confirm that the object created only once?
create a constructor and put one sop inside and verify the output.
default scope is singleton.

1.Create an Employee and then getEmps static method to return List<Employee>

2.created rest endpoint to get all the employees
 
 1.Issue was there were no getter and setter methods defined in Employee model.
 2. EmployeeService bean is not getting created, hence manually added the bean config to AppConfig.
 

endpoint URL : http://localhost:8080/employee
Method : GET
Response:

[
  {
    "empId": 101,
    "name": "Malreddy",
    "emailId": "malreddy.tugu@gmail.com",
    "deptName": "IT",
    "location": "Bangalore"
  },
  {
    "empId": 102,
    "name": "Vasu",
    "emailId": "vasu@gmail.com",
    "deptName": "ADMIN",
    "location": "USA"
  }
]

@RestController== @Controller+@ResponseBody
@ResponseBody converts your java to JSON.

[
{
	"name":"Malreddy",
	"age":"39",
	"email":"malreddy.tugu@gmail.com"
},
{
	"name":"Keerthi",
	"age":"26",
	"email":"kkumar@gmail.com"
}
]
Jettyson Jackson MessageConverters--Java--JSON
Gson-->google

MVC--> Model View Controller

DAO--->Model
View --->User Interface
Controller-->Server-->Servlet  

ModelAndView mv = new ModelAndView();
mv.setModel(emplIst);
mv.setView("emp.html");
return mv;

@RequestMapping("/employee",method=HTTPMethod.GET, produces="application/json")

@GetMapping("/employee")

http://localhost:8080/employee?id=1&name=Malreddy


QueryParams or RequestParam
id and name are query params or request params

how can you pass a value to a get api?
@RequestParam

	@GetMapping("/hello")
	public Employee hello(@RequestParam(required = true) String msg, @RequestParam(defaultValue = "0") int age) {
....
....
}

@GetMapping("/employee/{id}")
public Employee getEmployeeById(@PathVariable long id){

}

While @RequestParams extract values from the query string, @PathVariables extract values from the URI path:


//Example URL: http://localhost:8080/users/location/IN/region/DEL?status=active&minAge=18&maxAge=60

@GetMapping("/users/country/{countryCode}/state/{stateCode}")
public String getUsers(@PathVariable Map<String, String> locationMap, @RequestParam Map<String,String> queryMap) {

....
....

}


@GetMapping("/employee/{id}/name/{name}")
	public String getEmployee( @PathVariable Map<String, String> empMap) {
		System.out.println(empMap);
		return "PathParamMap";
	}
	
	@GetMapping("/employee/id/name/")
	public String getEmployeeQueryMap(@RequestParam Map<String, String> queryMap) {
		System.out.println(queryMap);
		return "QueryParamMap";
	}
 URI --uniform resource indicator
 URL - uniform resource locator




